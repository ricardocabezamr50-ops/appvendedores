rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() { return request.auth != null; }

    function userDoc() {
      return /databases/$(db)/documents/users/$(request.auth.uid);
    }

    // Nivel del usuario (0–3). Si falta o no es número, toma 0.
    function userLevel() {
      return isSignedIn() && exists(userDoc()) && (get(userDoc()).data.level is number)
        ? ( (get(userDoc()).data.level >= 0 && get(userDoc()).data.level <= 3)
            ? get(userDoc()).data.level
            : 0 )
        : 0;
    }

    // Admin por custom claim o por users/{uid}.role == "admin"
    function isAdmin() {
      return isSignedIn() && (
        (request.auth.token.admin == true) ||
        (exists(userDoc()) && get(userDoc()).data.role == 'admin')
      );
    }

    // Nivel del documento (0–3). Si falta o es inválido, se asume 0.
    function docMinLevel(resourceData) {
      return ('minLevel' in resourceData) && (resourceData.minLevel is number) &&
             resourceData.minLevel >= 0 && resourceData.minLevel <= 3
        ? resourceData.minLevel
        : 0;
    }

    // Users: cada uno su perfil; admin puede todo
    match /users/{uid} {
      allow read: if isSignedIn() && (uid == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && uid == request.auth.uid;
      allow update, delete: if isSignedIn() && (uid == request.auth.uid || isAdmin());
    }

    // Documents: lectura por nivel; escritura solo admin
    match /documents/{docId} {
      // Doc con nivel N lo leen usuarios con nivel >= N (0 → todos los logueados)
      allow read: if isSignedIn() && (userLevel() >= docMinLevel(resource.data));
      allow create, update, delete: if isAdmin();
    }

    // Resto denegado
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
